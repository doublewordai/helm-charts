suite: test applications
release:
  name: "test-release"
  namespace: "test-namespace"
values:
- ./values/v1.yaml
templates:
- templates/applications.yaml
tests:
- it: should have a application label
  asserts:
  - matchRegex:
      path: metadata.labels['app.kubernetes.io/component']
      pattern: "^application-.*$"

- it: should have qualified names for everything
  asserts:
  - matchRegex:
      path: metadata.name
      pattern: "^test-release-model-orchestra-.*"

- it: should apply template defaults to application with empty config
  documentSelector:
    path: $[?(@.kind=="ConfigMap")].metadata.labels['app.kubernetes.io/component']
    value: application-hello-world-1
  asserts:
  - equal:
      path: data["config.yaml"]
      value: |
        takeoff:
          server_config:
            internal_port: 3005
          readers_config:
            hello-world-1:
              buffer_requests: true
              consumer_group: primary
              device: cpu
              internal_gateway_ip: test-release-model-orchestra-gateway
              model_name: TitanML/dummy_model

- it: should correctly merge application values with template
  documentSelector:
    path: $[?(@.kind=="ConfigMap")].metadata.labels['app.kubernetes.io/component']
    value: application-hello-world-2
  asserts:
  - equal:
      path: data["config.yaml"]
      value: |
        takeoff:
          server_config:
            internal_port: 3005
          readers_config:
            hello-world-2:
              buffer_requests: true
              consumer_group: secondary
              device: cuda
              internal_gateway_ip: test-release-model-orchestra-gateway
              model_name: custom/model

- it: should properly configure application deployment with template values
  documentSelector:
    path: $[?(@.kind=="Deployment")].metadata.labels['app.kubernetes.io/component']
    value: application-hello-world-1
  asserts:
  - equal:
      path: spec.template.spec.containers[0].image
      value: "tytn/takeoff-pro:0.22.0-rc19-gpu"
  - equal:
      path: spec.template.spec.containers[0].name
      value: "test-release-model-orchestra-hello-world-1"
  - equal:
      path: spec.template.spec.serviceAccountName
      value: "test-release-model-orchestra"
  - contains:
      path: spec.template.spec.containers[0].env
      content: { name: "TAKEOFF_ADD_READER_ID_SUFFIX", value: "true" }

- it: should apply custom resource limits when specified
  documentSelector:
    path: $[?(@.kind=="Deployment")].metadata.labels['app.kubernetes.io/component']
    value: application-hello-world-2
  asserts:
  - equal:
      path: spec.template.spec.containers[0].resources.limits.cpu
      value: 200m
  - equal:
      path: spec.template.spec.containers[0].resources.limits.memory
      value: 256Mi
  - equal:
      path: spec.template.spec.containers[0].resources.limits["nvidia.com/gpu"]
      value: 1

- it: should create ScaledObject when scaling is enabled
  documentSelector:
    path: $[?(@.kind=="ScaledObject")].metadata.labels['app.kubernetes.io/component']
    value: application-scaled-app
  asserts:
  - equal:
      path: metadata.name
      value: test-release-model-orchestra-scaled-app
  - equal:
      path: spec.scaleTargetRef.kind
      value: Deployment
  - equal:
      path: spec.scaleTargetRef.name
      value: test-release-model-orchestra-scaled-app
  - equal:
      path: spec.minReplicaCount
      value: 1
  - equal:
      path: spec.maxReplicaCount
      value: 4
  - contains:
      path: spec.triggers
      content:
        type: external-push
        metadata:
          scalerAddress: test-release-model-orchestra-gateway.test-namespace.svc.cluster.local:3005
          target_scalable: "15"

- it: should mount expected volumes for applications
  documentSelector:
    path: kind
    value: Deployment
    matchMany: true
    skipEmpty: true
  asserts:
  - contains:
      path: spec.template.spec.volumes
      content:
        name: config
      any: true
  - contains:
      path: spec.template.spec.volumes
      content:
        name: dshm
        emptyDir:
          medium: Memory
  - contains:
      path: spec.template.spec.containers[0].volumeMounts
      content:
        name: config
        mountPath: /code/config.yaml
        subPath: config.yaml
  - contains:
      path: spec.template.spec.containers[0].volumeMounts
      content:
        name: models
        mountPath: /code/models
  - contains:
      path: spec.template.spec.containers[0].volumeMounts
      content:
        name: dshm
        mountPath: /dev/shm
