apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "debug.fullname" . }}
  labels:
    {{- include "debug.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "debug.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "debug.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "debug.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: fix-ssh-perms
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command:
          - sh
          - -c
          - |
            set -eux
            mkdir -p /ssh
            cp /ro/{{ .Values.ssh.privateKeyName }} /ssh/id_rsa
            chmod 600 /ssh/id_rsa
            chown 1001:1001 /ssh/id_rsa
        volumeMounts:
          - { name: ssh-key-ro, mountPath: /ro }
          - { name: ssh-key-rw, mountPath: /ssh }
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
            - |
              set -e

              # 1) make sure host keys exist - never bake them into the image
              if [ ! -f /home/dev/.ssh/id_rsa ]; then
                echo "No SSH host keys found, exiting..."
                exit 1
              fi

              ls -la /home/dev/.ssh
              cat /home/dev/.ssh/id_rsa

              if ! ssh-keygen -l -f /home/dev/.ssh/id_rsa >/dev/null 2>&1; then
                echo "[fatal] private key is invalid - check your Secret" >&2
                exit 1
              fi

              # 2) launch sshd on a high port (non-root)
              echo "[sshd] starting …"
              sudo /usr/sbin/sshd -p {{ .Values.ssh.localPort }} -D &             # backgrounded; logs to stdout

              # 3) start the reverse tunnel and babysit it forever
              echo "[autossh] opening reverse tunnel …"
              autossh \
                -M 0 -N \
                -i /home/dev/.ssh/id_rsa \
                -R {{ .Values.ssh.remotePort }}:localhost:{{ .Values.ssh.localPort }} \
                {{ .Values.ssh.bastionUser }}@{{ .Values.ssh.bastionHost }} \
                {{ .Values.ssh.sshOptions }}
          env:
            - name: DEBIAN_FRONTEND
              value: noninteractive
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: ssh-key-rw
              mountPath: /home/dev/.ssh
              readOnly: true
            {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      volumes:
        - name: ssh-key-ro
          secret:
            secretName: {{ .Values.ssh.privateKeySecret }}
            defaultMode: 0400
        - name: ssh-key-rw
          emptyDir: {}
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
