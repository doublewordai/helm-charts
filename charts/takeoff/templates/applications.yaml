
{{- $values := .Values }}
{{- range $app_name, $application := .Values.applications }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: takeoff-config-{{ $app_name }}
data:
  takeoff-config.yaml: |
    takeoff:
      server_config:
        internal_port: 3005
      readers_config:
        {{- with $application.readerConfig }}
        {{ .consumer_group }}:
          {{- toYaml . | nindent 10 }}
          internal_gateway_ip : takeoff-controller-svc
        {{- end }}
---
# Various statefulsets
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: takeoff-{{ $app_name }}
spec:
  serviceName: takeoff-{{ $app_name }}
  replicas: {{ $application.replicas }}
  selector:
    matchLabels:
      app: takeoff-{{ $app_name }}
  template:
    metadata:
      labels:
        app: takeoff-{{ $app_name }}
    spec:
    {{- if and $values.useGKENodeSelector $application.gpusPerReplica}}
      nodeSelector:
        cloud.google.com/gke-accelerator: {{ ternary "nvidia-l4" $application.gpuType (eq $application.gpuType nil) }}
        cloud.google.com/gke-accelerator-count: {{ $application.gpusPerReplica | quote }}
    {{- end }}
      containers:
        - name: takeoff-{{ $app_name }}
          image: tytn/takeoff-pro:{{ $values.takeoffVersion }}{{- if $application.gpusPerReplica }}-gpu{{- else }}-cpu{{- end }}
          imagePullPolicy: Always
          env:
            - name: TAKEOFF_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: takeoff-secrets
                  key: TAKEOFF_ACCESS_TOKEN
            {{- range $key, $value := $application.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          volumeMounts:
            - name: config-volume
              mountPath: /code/config.yaml
              subPath: takeoff-config.yaml
            - name: takeoff-cache-{{ $app_name }}
              mountPath: /code/models
            - name: dshm
              mountPath: /dev/shm
            - name: liveness-check
              mountPath: /code/liveness-check.py
              subPath: liveness-check.py

          {{- with $application }}
          resources:
            limits:
              {{- if .cpuLimit }} #Non-local only
              cpu: {{ .cpuLimit }}
              {{- end }}

              {{- if .memoryLimit }} #Non-local only
              memory: {{ .memoryLimit }}
              {{- end }}

              {{- if .ephemeralMemoryLimit }} #GCP only, kind of
              ephemeral-storage: {{ .ephemeralMemoryLimit }}
              {{- end }}

              {{- if $application.gpusPerReplica }}
              nvidia.com/gpu: {{ $application.gpusPerReplica }}
              {{- end }}

            {{- if not $values.disableResourceRequests }}
            requests:
              {{- if .cpuLimit }} #Non-local only
              cpu: {{ .cpuLimit }}
              {{- end }}

              {{- if .memoryLimit }} #Non-local only
              memory: {{ .memoryLimit }}
              {{- end }}

              {{- if .ephemeralMemoryLimit }} #GCP only, kind of
              ephemeral-storage: {{ .ephemeralMemoryLimit }}
              {{- end }}

              {{- if $application.gpusPerReplica }}
              nvidia.com/gpu: {{ $application.gpusPerReplica }}
              {{- end }}

          {{- end }}
        {{- end }}



          {{- if $application.enableLivenessProbe }}
          livenessProbe:
            exec:
              command:
              - python
              - /code/liveness-check.py
            initialDelaySeconds: {{ ternary 120 $application.livenessInitialDelaySeconds (eq $application.livenessInitialDelaySeconds nil) }}
            periodSeconds: {{ ternary 5 $application.livenessPeriodSeconds (eq $application.livenessPeriodSeconds nil) }}
            timeoutSeconds: {{ ternary 10 $application.livenessTimeoutSeconds (eq $application.livenessTimeoutSeconds nil) }}
            failureThreshold: {{ ternary 10 $application.livenessFailureThreshold (eq $application.livenessFailureThreshold nil) }}


          {{- end }}

          # successThresh = 1 periodS = 1 timeoutS = 1 failureThresh = 60

          {{- if $application.enableStartupProbe }}
          startupProbe:
            httpGet:
              path: /status
              port: 3000

            successThreshold: {{ ternary 1 $application.startupSuccessThreshold (eq $application.startupSuccessThreshold nil) }}
            periodSeconds: {{ ternary 1 $application.startupPeriodSeconds (eq $application.startupPeriodSeconds nil) }}
            timeoutSeconds: {{ ternary 1 $application.startupTimeoutSeconds (eq $application.startupTimeoutSeconds nil) }}
            failureThreshold: {{ ternary 60 $application.startupFailureThreshold (eq $application.startupFailureThreshold nil) }}
          {{- end}}

      imagePullSecrets:
        - name: takeoff-regcred
      volumes:
        - name: config-volume
          configMap:
            name: takeoff-config-{{ $app_name }}
        - name: liveness-check
          configMap:
            name: takeoff-liveness-check
        - name: dshm
          emptyDir:
            medium: Memory
        {{- if $values.useLocalPVC  }}
        - name: takeoff-cache-{{ $app_name }}
          persistentVolumeClaim:
            claimName: takeoff-cache-pvc
        {{- end }}
        - name: startup-check
          configMap:
            name: takeoff-startup-check
  {{- if (not $values.useLocalPVC) }}
  volumeClaimTemplates:
    - metadata:
        name: takeoff-cache-{{ $app_name }}
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ $application.cacheSize | default "" }}
        storageClassName: {{ $application.cacheStorageClass | default "" }}
  {{- end }}

---

{{- end }}
