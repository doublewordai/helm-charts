{{- if .Values.useAWSLoadBalancer }}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "external"
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
    helm.sh/resource-policy: keep
  name: takeoff-api-lb
spec:
  type: LoadBalancer
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: takeoff
    - port: 3001
      targetPort: 3001
      protocol: TCP
      name: management
    - port: 3003
      targetPort: 3003
      protocol: TCP
      name: api
  selector:
    app: takeoff-controller
---
{{- end }}


{{- if .Values.autoscalingEnabled }}
{{- $values := .Values }}
{{- $release := .Release.Name -}}
{{- range $app_name, $application := .Values.applications }}
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: {{ $app_name }}-scaling-object
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: {{ $app_name }}
  pollingInterval: {{ ternary 30 $application.pollingInterval (eq $application.pollingInterval nil) }}
  cooldownPeriod: {{ ternary 300 $application.cooldownPeriod (eq $application.cooldownPeriod nil) }}
  initialCooldownPeriod:  {{ ternary 300 $application.initialCooldownPeriod (eq $application.initialCooldownPeriod nil) }}
  {{- if $application.scaleToZero }}
  idleReplicaCount: {{ ternary 0 $application.idleReplicas (eq $application.idleReplicas nil) }}
  {{- end }}
  minReplicaCount: {{ ternary 1 $application.minReplicas (eq $application.minReplicas nil) }}
  maxReplicaCount: {{ ternary 3 $application.maxReplicas (eq $application.maxReplicas nil) }}
  fallback:
    failureThreshold: 3
    replicas: 1
  advanced:
    restoreToOriginalReplicaCount: {{ ternary false $application.shouldRestoreToOriginalReplicaCount (eq $application.shouldRestoreToOriginalReplicaCount nil) }}

  {{- $scaleDown := $application.scaleDown | default dict }}
  {{- $scaleUp := $application.scaleUp | default dict }}
  horizontalPodAutoscalerConfig:
    behavior:
      scaleDown:
        stabilizationWindowSeconds: {{ ternary 300 $scaleDown.stabilizationWindowSeconds (eq $scaleDown.stabilizationWindowSeconds nil) }}
        policies:
          {{- range $policy := $scaleDown.policies | default list }}
          - type: {{ $policy.type | default "Pods" }}
            value: {{ ternary 1 $policy.value  (eq $policy.value  nil) }}
            periodSeconds: {{ ternary 300 $policy.periodSeconds  (eq $policy.periodSeconds  nil) }}
          {{- end }}
      scaleUp:
        stabilizationWindowSeconds: {{ ternary 300 $scaleUp.stabilizationWindowSeconds (eq $scaleUp.stabilizationWindowSeconds nil) }}
        policies:
          {{- range $policy := $scaleUp.policies | default list }}
          - type: {{ $policy.type | default "Pods" }}
            value: {{ ternary 1 $policy.value  (eq $policy.value  nil) }}
            periodSeconds: {{ ternary 300 $policy.periodSeconds  (eq $policy.periodSeconds  nil) }}
          {{- end }}

  {{if $application.triggers}}
  triggers:
  {{- range $trigger := $application.triggers }}
  - type: {{ $trigger.type | default "prometheus" }}
    metadata:
      {{- range $key, $value := $trigger.metadata }}
      {{ $key }}: {{ $value | quote }}
      {{- end }}
  {{- end }}
  {{else}}

  {{ $consumer_group := $application.readerConfig.consumer_group }}  # Define $consumer_group

  triggers:
  - type: prometheus
    metadata:
      name: queue_size_trigger
      serverAddress: http://{{$release}}-kube-promethe-prometheus:9090/
      query: "queue_time{job=\"takeoff-controller\", quantile=\"1\", consumer_group=\"{{ $consumer_group}}\"}"
      threshold: "1"
  - type: prometheus
    metadata:
      name: scaling_to_zero_trigger
      serverAddress: http://{{$release}}-kube-promethe-prometheus:9090/
      query: "rate(http_pre_handler_requests_total{job=\"takeoff-controller\", path=~\".*{{ $consumer_group }}.*\"}[1m])"
      activationThreshold: "0"
      threshold: "1000000"
  {{- end}}
---
{{- end }}
{{- end }}
