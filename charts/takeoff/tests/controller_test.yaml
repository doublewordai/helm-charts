suite: test controller
release:
  name: "test-release"
  namespace: "test-namespace"
set:
  controller.exportPrometheusMetrics: true
templates:
  - templates/controller.yaml
tests:
  - it: should have a controller label
    asserts:
      - equal:
          path: metadata.labels['app.kubernetes.io/component']
          value: controller

  - it: should have the same qualified names for everything
    asserts:
      - equal:
          path: metadata.name
          value: "test-release-takeoff-controller"

  - it: should allow config overrides
    set:
      controller.config.allowRemoteImages: true
      controller.config.allowSomethingArbitrary: "hello"
    documentSelector:
      path: kind
      value: ConfigMap
    asserts:
      - equal:
          path: data["config.yaml"]
          value: |
            takeoff:
              server_config:
                allow_remote_images: true
                allow_something_arbitrary: hello
                internal_port: 3005
              readers_config:

  - it: can set environment variables
    set:
      controller.env:
        - name: HELLO
          value: "WORLD"
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content: { name: "HELLO", value: "WORLD" }
      - contains:
          path: spec.template.spec.containers[0].env
          content: { name: "TAKEOFF_ADD_READER_ID_SUFFIX", value: "true" }

  - it: should set container image correctly
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: "tytn/takeoff-pro:0.22.0-rc18-cpu"
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: "IfNotPresent"

  - it: should set replica count correctly
    set:
      controller.replicaCount: 3
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - equal:
          path: spec.replicas
          value: 3

  - it: should configure pod annotations when provided
    set:
      controller.podAnnotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/scrape"]
          value: "true"
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/port"]
          value: "3001"

  - it: should configure pod labels when provided
    set:
      controller.podLabels:
        environment: "test"
        tier: "backend"
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - equal:
          path: spec.template.metadata.labels["environment"]
          value: "test"
      - equal:
          path: spec.template.metadata.labels["tier"]
          value: "backend"

  - it: should configure pod security context when provided
    set:
      controller.podSecurityContext:
        fsGroup: 2000
        runAsNonRoot: true
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 2000
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true

  - it: should expose controller ports
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            containerPort: 3000
            protocol: TCP
            name: inference
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            containerPort: 3003
            protocol: TCP
            name: openai
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            containerPort: 3005
            protocol: TCP
            name: internal

  - it: should create service with correct ports
    documentSelector:
      path: kind
      value: Service
    asserts:
      - equal:
          path: spec.type
          value: ClusterIP
      - contains:
          path: spec.ports
          content:
            port: 80
            targetPort: openai
            protocol: TCP
            name: http
      - contains:
          path: spec.ports
          content:
            port: 3001
            protocol: TCP
            name: management
      - contains:
          path: spec.ports
          content:
            port: 3000
            protocol: TCP
            name: inference
      - contains:
          path: spec.ports
          content:
            port: 3005
            protocol: TCP
            name: internal

  - it: should create ingress when enabled
    set:
      controller.ingress.enabled: true
      controller.ingress.hosts[0].host: api.example.com
    documentSelector:
      path: kind
      value: Ingress
    asserts:
      - equal:
          path: spec.rules[0].host
          value: api.example.com
