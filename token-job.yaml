# {{- if and .Values.cluster.leader .Values.cluster.interconnect.enabled }}
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: {{ include "console.fullname" . }}-make-token
#   labels: {{- include "console.labels" . | nindent 4 }}
#   annotations:
#     "helm.sh/hook": post-install
#     "helm.sh/hook-weight": "20"
#     "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
# spec:
#   backoffLimit: 3
#   template:
#     spec:
#       restartPolicy: OnFailure
#       serviceAccountName: {{ include "console.serviceAccountName" . }}
#       volumes:
#         - name: work
#           emptyDir: {}
#       containers:
#         - name: make-token
#           image: bitnami/kubectl                    # has bash, curl, tar
#           volumeMounts:
#             - name: work
#               mountPath: /work
#           command: ["/bin/bash","-c"]              # <<< use bash
#           args:
#             - |
#               set -euo pipefail || set -eu        # pipefail not fatal if unsupported

#               SKUP_VERSION="2.0.0"
#               echo "üîé  Downloading Skupper CLI ${SKUP_VERSION}"
#               curl -fsSL \
#                 "https://github.com/skupperproject/skupper/releases/download/${SKUP_VERSION}/skupper-cli-${SKUP_VERSION}-linux-amd64.tgz" \
#                 -o /work/skupper.tgz

#               tar -xf /work/skupper.tgz -C /work
#               chmod 0755 /work/skupper

#               echo "‚è≥  Waiting (‚â§60 s) for Skupper site to become Ready‚Ä¶"
#               for i in {1..30}; do
#                   if /work/skupper --namespace {{ .Release.Namespace }} site status 2>/dev/null \
#                        | grep -qE '^Status:[[:space:]]+Ready'; then
#                       break
#                   fi
#                   sleep 1
#               done || { echo '‚ùå  Site not ready after 60 s'; exit 1; }

#               echo "‚úÖ  Site ready ‚Äì issuing token"
#               /work/skupper --namespace {{ .Release.Namespace }} \
#                    token issue /work/token.yaml \
#                    --expiration-window 24h \
#                    --redemptions-allowed 2

#               echo "üîê  Storing token in secret {{ .Values.cluster.satellite.skupperTokenSecret }}"
#               kubectl create secret generic {{ .Values.cluster.satellite.skupperTokenSecret }} \
#                      --from-file=token=/work/token.yaml \
#                      --dry-run=client -o yaml | kubectl apply -f -
# {{- end }}
